Prefix(:=<http://www.co-ode.org/ontologies/pizza/pizza.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.co-ode.org/ontologies/pizza/pizza.owl>
Annotation(owl:versionInfo "v.1.5. Removed protege.owl import and references. Made ontology URI date-independent"@en)
Annotation(owl:versionInfo "version 1.5"^^xsd:string)
Annotation(rdfs:comment "An example ontology that contains all constructs required for the various versions of the Pizza Tutorial run by Manchester University (see http://www.co-ode.org/resources/tutorials/)"@en)
Annotation(owl:versionInfo "v.1.4. Added Food class (used in domain/range of hasIngredient), Added several hasCountryOfOrigin restrictions on pizzas, Made hasTopping invers functional"@en)

Declaration(Class(:American))
Declaration(Class(:AmericanHot))
Declaration(Class(:AnchoviesTopping))
Declaration(Class(:ArtichokeTopping))
Declaration(Class(:AsparagusTopping))
Declaration(Class(:Cajun))
Declaration(Class(:CajunSpiceTopping))
Declaration(Class(:CaperTopping))
Declaration(Class(:Capricciosa))
Declaration(Class(:Caprina))
Declaration(Class(:CheeseTopping))
Declaration(Class(:CheeseyPizza))
Declaration(Class(:CheeseyVegetableTopping))
Declaration(Class(:ChickenTopping))
Declaration(Class(:Country))
Declaration(Class(:DeepPanBase))
Declaration(Class(:DomainConcept))
Declaration(Class(:Fiorentina))
Declaration(Class(:FishTopping))
Declaration(Class(:Food))
Declaration(Class(:FourCheesesTopping))
Declaration(Class(:FourSeasons))
Declaration(Class(:FruitTopping))
Declaration(Class(:FruttiDiMare))
Declaration(Class(:GarlicTopping))
Declaration(Class(:Giardiniera))
Declaration(Class(:GoatsCheeseTopping))
Declaration(Class(:GorgonzolaTopping))
Declaration(Class(:GreenPepperTopping))
Declaration(Class(:HamTopping))
Declaration(Class(:HerbSpiceTopping))
Declaration(Class(:Hot))
Declaration(Class(:HotGreenPepperTopping))
Declaration(Class(:HotSpicedBeefTopping))
Declaration(Class(:IceCream))
Declaration(Class(:InterestingPizza))
Declaration(Class(:JalapenoPepperTopping))
Declaration(Class(:LaReine))
Declaration(Class(:LeekTopping))
Declaration(Class(:Margherita))
Declaration(Class(:MeatTopping))
Declaration(Class(:MeatyPizza))
Declaration(Class(:Medium))
Declaration(Class(:Mild))
Declaration(Class(:MixedSeafoodTopping))
Declaration(Class(:MozzarellaTopping))
Declaration(Class(:Mushroom))
Declaration(Class(:MushroomTopping))
Declaration(Class(:NamedPizza))
Declaration(Class(:Napoletana))
Declaration(Class(:NonVegetarianPizza))
Declaration(Class(:NutTopping))
Declaration(Class(:OliveTopping))
Declaration(Class(:OnionTopping))
Declaration(Class(:ParmaHamTopping))
Declaration(Class(:Parmense))
Declaration(Class(:ParmesanTopping))
Declaration(Class(:PeperonataTopping))
Declaration(Class(:PeperoniSausageTopping))
Declaration(Class(:PepperTopping))
Declaration(Class(:PetitPoisTopping))
Declaration(Class(:PineKernels))
Declaration(Class(:Pizza))
Declaration(Class(:PizzaBase))
Declaration(Class(:PizzaTopping))
Declaration(Class(:PolloAdAstra))
Declaration(Class(:PrawnsTopping))
Declaration(Class(:PrinceCarlo))
Declaration(Class(:QuattroFormaggi))
Declaration(Class(:RealItalianPizza))
Declaration(Class(:RedOnionTopping))
Declaration(Class(:RocketTopping))
Declaration(Class(:Rosa))
Declaration(Class(:RosemaryTopping))
Declaration(Class(:SauceTopping))
Declaration(Class(:Siciliana))
Declaration(Class(:SlicedTomatoTopping))
Declaration(Class(:SloppyGiuseppe))
Declaration(Class(:Soho))
Declaration(Class(:Spiciness))
Declaration(Class(:SpicyPizza))
Declaration(Class(:SpicyPizzaEquivalent))
Declaration(Class(:SpicyTopping))
Declaration(Class(:SpinachTopping))
Declaration(Class(:SultanaTopping))
Declaration(Class(:SundriedTomatoTopping))
Declaration(Class(:SweetPepperTopping))
Declaration(Class(:ThinAndCrispyBase))
Declaration(Class(:ThinAndCrispyPizza))
Declaration(Class(:TobascoPepperSauce))
Declaration(Class(:TomatoTopping))
Declaration(Class(:UnclosedPizza))
Declaration(Class(:ValuePartition))
Declaration(Class(:VegetableTopping))
Declaration(Class(:VegetarianPizza))
Declaration(Class(:VegetarianPizzaEquivalent1))
Declaration(Class(:VegetarianPizzaEquivalent2))
Declaration(Class(:VegetarianTopping))
Declaration(Class(:Veneziana))
Declaration(ObjectProperty(:hasBase))
Declaration(ObjectProperty(:hasCountryOfOrigin))
Declaration(ObjectProperty(:hasIngredient))
Declaration(ObjectProperty(:hasSpiciness))
Declaration(ObjectProperty(:hasTopping))
Declaration(ObjectProperty(:isBaseOf))
Declaration(ObjectProperty(:isIngredientOf))
Declaration(ObjectProperty(:isToppingOf))
Declaration(NamedIndividual(:America))
Declaration(NamedIndividual(:England))
Declaration(NamedIndividual(:France))
Declaration(NamedIndividual(:Germany))
Declaration(NamedIndividual(:Italy))
AnnotationAssertion(rdfs:label :American "Americana"@pt)
SubClassOf(:American :NamedPizza)
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :PeperoniSausageTopping))
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:American ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :PeperoniSausageTopping :TomatoTopping)))
SubClassOf(:American ObjectHasValue(:hasCountryOfOrigin :America))
DisjointClasses(:American :AmericanHot)
DisjointClasses(:American :Cajun)
DisjointClasses(:American :Capricciosa)
DisjointClasses(:American :Caprina)
DisjointClasses(:American :Fiorentina)
DisjointClasses(:American :FourSeasons)
DisjointClasses(:American :FruttiDiMare)
DisjointClasses(:American :Giardiniera)
DisjointClasses(:American :LaReine)
DisjointClasses(:American :Margherita)
DisjointClasses(:American :Mushroom)
DisjointClasses(:American :Napoletana)
DisjointClasses(:American :Parmense)
DisjointClasses(:American :PolloAdAstra)
DisjointClasses(:American :PrinceCarlo)
DisjointClasses(:American :QuattroFormaggi)
DisjointClasses(:American :Rosa)
DisjointClasses(:American :Siciliana)
DisjointClasses(:American :SloppyGiuseppe)
DisjointClasses(:American :Soho)
DisjointClasses(:American :UnclosedPizza)
DisjointClasses(:American :Veneziana)
AnnotationAssertion(rdfs:label :AmericanHot "AmericanaPicante"@pt)
SubClassOf(:AmericanHot :NamedPizza)
SubClassOf(:AmericanHot ObjectSomeValuesFrom(:hasTopping :HotGreenPepperTopping))
SubClassOf(:AmericanHot ObjectSomeValuesFrom(:hasTopping :JalapenoPepperTopping))
SubClassOf(:AmericanHot ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:AmericanHot ObjectSomeValuesFrom(:hasTopping :PeperoniSausageTopping))
SubClassOf(:AmericanHot ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:AmericanHot ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:HotGreenPepperTopping :JalapenoPepperTopping :MozzarellaTopping :PeperoniSausageTopping :TomatoTopping)))
SubClassOf(:AmericanHot ObjectHasValue(:hasCountryOfOrigin :America))
DisjointClasses(:AmericanHot :Cajun)
DisjointClasses(:AmericanHot :Capricciosa)
DisjointClasses(:AmericanHot :Caprina)
DisjointClasses(:AmericanHot :Fiorentina)
DisjointClasses(:AmericanHot :FourSeasons)
DisjointClasses(:AmericanHot :FruttiDiMare)
DisjointClasses(:AmericanHot :Giardiniera)
DisjointClasses(:AmericanHot :LaReine)
DisjointClasses(:AmericanHot :Margherita)
DisjointClasses(:AmericanHot :Mushroom)
DisjointClasses(:AmericanHot :Napoletana)
DisjointClasses(:AmericanHot :Parmense)
DisjointClasses(:AmericanHot :PolloAdAstra)
DisjointClasses(:AmericanHot :PrinceCarlo)
DisjointClasses(:AmericanHot :QuattroFormaggi)
DisjointClasses(:AmericanHot :Rosa)
DisjointClasses(:AmericanHot :Siciliana)
DisjointClasses(:AmericanHot :SloppyGiuseppe)
DisjointClasses(:AmericanHot :Soho)
DisjointClasses(:AmericanHot :UnclosedPizza)
DisjointClasses(:AmericanHot :Veneziana)
AnnotationAssertion(rdfs:label :AnchoviesTopping "CoberturaDeAnchovies"@pt)
SubClassOf(:AnchoviesTopping :FishTopping)
DisjointClasses(:AnchoviesTopping :MixedSeafoodTopping)
DisjointClasses(:AnchoviesTopping :PrawnsTopping)
AnnotationAssertion(rdfs:label :ArtichokeTopping "CoberturaDeArtichoke"@pt)
SubClassOf(:ArtichokeTopping :VegetableTopping)
SubClassOf(:ArtichokeTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:ArtichokeTopping :AsparagusTopping)
DisjointClasses(:ArtichokeTopping :CaperTopping)
DisjointClasses(:ArtichokeTopping :GarlicTopping)
DisjointClasses(:ArtichokeTopping :LeekTopping)
DisjointClasses(:ArtichokeTopping :MushroomTopping)
DisjointClasses(:ArtichokeTopping :OliveTopping)
DisjointClasses(:ArtichokeTopping :OnionTopping)
DisjointClasses(:ArtichokeTopping :PepperTopping)
DisjointClasses(:ArtichokeTopping :PetitPoisTopping)
DisjointClasses(:ArtichokeTopping :RocketTopping)
DisjointClasses(:ArtichokeTopping :SpinachTopping)
DisjointClasses(:ArtichokeTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :AsparagusTopping "CoberturaDeAspargos"@pt)
SubClassOf(:AsparagusTopping :VegetableTopping)
SubClassOf(:AsparagusTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:AsparagusTopping :CaperTopping)
DisjointClasses(:AsparagusTopping :GarlicTopping)
DisjointClasses(:AsparagusTopping :LeekTopping)
DisjointClasses(:AsparagusTopping :MushroomTopping)
DisjointClasses(:AsparagusTopping :OliveTopping)
DisjointClasses(:AsparagusTopping :OnionTopping)
DisjointClasses(:AsparagusTopping :PepperTopping)
DisjointClasses(:AsparagusTopping :PetitPoisTopping)
DisjointClasses(:AsparagusTopping :RocketTopping)
DisjointClasses(:AsparagusTopping :SpinachTopping)
DisjointClasses(:AsparagusTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :Cajun "Cajun"@pt)
SubClassOf(:Cajun :NamedPizza)
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :OnionTopping))
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :PeperonataTopping))
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :PrawnsTopping))
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :TobascoPepperSauce))
SubClassOf(:Cajun ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Cajun ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :OnionTopping :PeperonataTopping :PrawnsTopping :TobascoPepperSauce :TomatoTopping)))
DisjointClasses(:Cajun :Capricciosa)
DisjointClasses(:Cajun :Caprina)
DisjointClasses(:Cajun :Fiorentina)
DisjointClasses(:Cajun :FourSeasons)
DisjointClasses(:Cajun :FruttiDiMare)
DisjointClasses(:Cajun :Giardiniera)
DisjointClasses(:Cajun :LaReine)
DisjointClasses(:Cajun :Margherita)
DisjointClasses(:Cajun :Mushroom)
DisjointClasses(:Cajun :Napoletana)
DisjointClasses(:Cajun :Parmense)
DisjointClasses(:Cajun :PolloAdAstra)
DisjointClasses(:Cajun :PrinceCarlo)
DisjointClasses(:Cajun :QuattroFormaggi)
DisjointClasses(:Cajun :Rosa)
DisjointClasses(:Cajun :Siciliana)
DisjointClasses(:Cajun :SloppyGiuseppe)
DisjointClasses(:Cajun :Soho)
DisjointClasses(:Cajun :UnclosedPizza)
DisjointClasses(:Cajun :Veneziana)
AnnotationAssertion(rdfs:label :CajunSpiceTopping "CoberturaDeCajun"@pt)
SubClassOf(:CajunSpiceTopping :HerbSpiceTopping)
SubClassOf(:CajunSpiceTopping ObjectSomeValuesFrom(:hasSpiciness :Hot))
DisjointClasses(:CajunSpiceTopping :RosemaryTopping)
AnnotationAssertion(rdfs:label :CaperTopping "CoberturaDeCaper"@pt)
SubClassOf(:CaperTopping :VegetableTopping)
SubClassOf(:CaperTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:CaperTopping :GarlicTopping)
DisjointClasses(:CaperTopping :LeekTopping)
DisjointClasses(:CaperTopping :MushroomTopping)
DisjointClasses(:CaperTopping :OliveTopping)
DisjointClasses(:CaperTopping :OnionTopping)
DisjointClasses(:CaperTopping :PepperTopping)
DisjointClasses(:CaperTopping :PetitPoisTopping)
DisjointClasses(:CaperTopping :RocketTopping)
DisjointClasses(:CaperTopping :SpinachTopping)
DisjointClasses(:CaperTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :Capricciosa "Capricciosa"@pt)
SubClassOf(:Capricciosa :NamedPizza)
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :AnchoviesTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :CaperTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :HamTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :PeperonataTopping))
SubClassOf(:Capricciosa ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Capricciosa ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AnchoviesTopping :CaperTopping :HamTopping :MozzarellaTopping :OliveTopping :PeperonataTopping :TomatoTopping)))
DisjointClasses(:Capricciosa :Caprina)
DisjointClasses(:Capricciosa :Fiorentina)
DisjointClasses(:Capricciosa :FourSeasons)
DisjointClasses(:Capricciosa :FruttiDiMare)
DisjointClasses(:Capricciosa :Giardiniera)
DisjointClasses(:Capricciosa :LaReine)
DisjointClasses(:Capricciosa :Margherita)
DisjointClasses(:Capricciosa :Mushroom)
DisjointClasses(:Capricciosa :Napoletana)
DisjointClasses(:Capricciosa :Parmense)
DisjointClasses(:Capricciosa :PolloAdAstra)
DisjointClasses(:Capricciosa :PrinceCarlo)
DisjointClasses(:Capricciosa :QuattroFormaggi)
DisjointClasses(:Capricciosa :Rosa)
DisjointClasses(:Capricciosa :Siciliana)
DisjointClasses(:Capricciosa :SloppyGiuseppe)
DisjointClasses(:Capricciosa :Soho)
DisjointClasses(:Capricciosa :UnclosedPizza)
DisjointClasses(:Capricciosa :Veneziana)
AnnotationAssertion(rdfs:label :Caprina "Caprina"@pt)
SubClassOf(:Caprina :NamedPizza)
SubClassOf(:Caprina ObjectSomeValuesFrom(:hasTopping :GoatsCheeseTopping))
SubClassOf(:Caprina ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Caprina ObjectSomeValuesFrom(:hasTopping :SundriedTomatoTopping))
SubClassOf(:Caprina ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Caprina ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GoatsCheeseTopping :MozzarellaTopping :SundriedTomatoTopping :TomatoTopping)))
DisjointClasses(:Caprina :Fiorentina)
DisjointClasses(:Caprina :FourSeasons)
DisjointClasses(:Caprina :FruttiDiMare)
DisjointClasses(:Caprina :Giardiniera)
DisjointClasses(:Caprina :LaReine)
DisjointClasses(:Caprina :Margherita)
DisjointClasses(:Caprina :Mushroom)
DisjointClasses(:Caprina :Napoletana)
DisjointClasses(:Caprina :Parmense)
DisjointClasses(:Caprina :PolloAdAstra)
DisjointClasses(:Caprina :PrinceCarlo)
DisjointClasses(:Caprina :QuattroFormaggi)
DisjointClasses(:Caprina :Rosa)
DisjointClasses(:Caprina :Siciliana)
DisjointClasses(:Caprina :SloppyGiuseppe)
DisjointClasses(:Caprina :Soho)
DisjointClasses(:Caprina :UnclosedPizza)
DisjointClasses(:Caprina :Veneziana)
AnnotationAssertion(rdfs:label :CheeseTopping "CoberturaDeQueijo"@pt)
SubClassOf(:CheeseTopping :PizzaTopping)
DisjointClasses(:CheeseTopping :FishTopping)
DisjointClasses(:CheeseTopping :FruitTopping)
DisjointClasses(:CheeseTopping :HerbSpiceTopping)
DisjointClasses(:CheeseTopping :MeatTopping)
DisjointClasses(:CheeseTopping :NutTopping)
DisjointClasses(:CheeseTopping :SauceTopping)
DisjointClasses(:CheeseTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :CheeseyPizza "PizzaComQueijo"@pt)
AnnotationAssertion(rdfs:comment :CheeseyPizza "Any pizza that has at least 1 cheese topping."@en)
EquivalentClasses(:CheeseyPizza ObjectIntersectionOf(ObjectSomeValuesFrom(:hasTopping :CheeseTopping) :Pizza))
AnnotationAssertion(rdfs:label :CheeseyVegetableTopping "CoberturaDeQueijoComVegetais"@pt)
AnnotationAssertion(rdfs:comment :CheeseyVegetableTopping "This class will be inconsistent. This is because we have given it 2 disjoint parents, which means it could never have any members (as nothing can simultaneously be a CheeseTopping and a VegetableTopping). NB Called ProbeInconsistentTopping in the ProtegeOWL Tutorial."@en)
SubClassOf(:CheeseyVegetableTopping :CheeseTopping)
SubClassOf(:CheeseyVegetableTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :ChickenTopping "CoberturaDeFrango"@pt)
SubClassOf(:ChickenTopping :MeatTopping)
SubClassOf(:ChickenTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:ChickenTopping :HamTopping)
DisjointClasses(:ChickenTopping :HotSpicedBeefTopping)
DisjointClasses(:ChickenTopping :PeperoniSausageTopping)
AnnotationAssertion(rdfs:label :Country "Pais"@pt)
AnnotationAssertion(rdfs:comment :Country "A class that is equivalent to the set of individuals that are described in the enumeration - ie Countries can only be either America, England, France, Germany or Italy and nothing else. Note that these individuals have been asserted to be allDifferent from each other."@en)
EquivalentClasses(:Country ObjectIntersectionOf(ObjectOneOf(:France :England :Italy :Germany :America) :DomainConcept))
AnnotationAssertion(rdfs:label :DeepPanBase "BaseEspessa"@pt)
SubClassOf(:DeepPanBase :PizzaBase)
DisjointClasses(:DeepPanBase :ThinAndCrispyBase)
DisjointClasses(:DomainConcept :ValuePartition)
AnnotationAssertion(rdfs:label :Fiorentina "Fiorentina"@pt)
SubClassOf(:Fiorentina :NamedPizza)
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :GarlicTopping))
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :ParmesanTopping))
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :SpinachTopping))
SubClassOf(:Fiorentina ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Fiorentina ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GarlicTopping :MozzarellaTopping :OliveTopping :ParmesanTopping :SpinachTopping :TomatoTopping)))
DisjointClasses(:Fiorentina :FourSeasons)
DisjointClasses(:Fiorentina :FruttiDiMare)
DisjointClasses(:Fiorentina :Giardiniera)
DisjointClasses(:Fiorentina :LaReine)
DisjointClasses(:Fiorentina :Margherita)
DisjointClasses(:Fiorentina :Mushroom)
DisjointClasses(:Fiorentina :Napoletana)
DisjointClasses(:Fiorentina :Parmense)
DisjointClasses(:Fiorentina :PolloAdAstra)
DisjointClasses(:Fiorentina :PrinceCarlo)
DisjointClasses(:Fiorentina :QuattroFormaggi)
DisjointClasses(:Fiorentina :Rosa)
DisjointClasses(:Fiorentina :Siciliana)
DisjointClasses(:Fiorentina :SloppyGiuseppe)
DisjointClasses(:Fiorentina :Soho)
DisjointClasses(:Fiorentina :UnclosedPizza)
DisjointClasses(:Fiorentina :Veneziana)
AnnotationAssertion(rdfs:label :FishTopping "CoberturaDePeixe"@pt)
SubClassOf(:FishTopping :PizzaTopping)
SubClassOf(:FishTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:FishTopping :FruitTopping)
DisjointClasses(:FishTopping :HerbSpiceTopping)
DisjointClasses(:FishTopping :MeatTopping)
DisjointClasses(:FishTopping :NutTopping)
DisjointClasses(:FishTopping :SauceTopping)
DisjointClasses(:FishTopping :VegetableTopping)
SubClassOf(:Food :DomainConcept)
AnnotationAssertion(rdfs:label :FourCheesesTopping "CoberturaQuatroQueijos"@pt)
SubClassOf(:FourCheesesTopping :CheeseTopping)
SubClassOf(:FourCheesesTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:FourCheesesTopping :GoatsCheeseTopping)
DisjointClasses(:FourCheesesTopping :GorgonzolaTopping)
DisjointClasses(:FourCheesesTopping :MozzarellaTopping)
DisjointClasses(:FourCheesesTopping :ParmesanTopping)
AnnotationAssertion(rdfs:label :FourSeasons "QuatroQueijos"@pt)
SubClassOf(:FourSeasons :NamedPizza)
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :AnchoviesTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :CaperTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :PeperoniSausageTopping))
SubClassOf(:FourSeasons ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:FourSeasons ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AnchoviesTopping :CaperTopping :MozzarellaTopping :MushroomTopping :OliveTopping :PeperoniSausageTopping :TomatoTopping)))
DisjointClasses(:FourSeasons :FruttiDiMare)
DisjointClasses(:FourSeasons :Giardiniera)
DisjointClasses(:FourSeasons :LaReine)
DisjointClasses(:FourSeasons :Margherita)
DisjointClasses(:FourSeasons :Mushroom)
DisjointClasses(:FourSeasons :Napoletana)
DisjointClasses(:FourSeasons :Parmense)
DisjointClasses(:FourSeasons :PolloAdAstra)
DisjointClasses(:FourSeasons :PrinceCarlo)
DisjointClasses(:FourSeasons :QuattroFormaggi)
DisjointClasses(:FourSeasons :Rosa)
DisjointClasses(:FourSeasons :Siciliana)
DisjointClasses(:FourSeasons :SloppyGiuseppe)
DisjointClasses(:FourSeasons :Soho)
DisjointClasses(:FourSeasons :UnclosedPizza)
DisjointClasses(:FourSeasons :Veneziana)
AnnotationAssertion(rdfs:label :FruitTopping "CoberturaDeFrutas"@pt)
SubClassOf(:FruitTopping :PizzaTopping)
DisjointClasses(:FruitTopping :HerbSpiceTopping)
DisjointClasses(:FruitTopping :MeatTopping)
DisjointClasses(:FruitTopping :NutTopping)
DisjointClasses(:FruitTopping :SauceTopping)
DisjointClasses(:FruitTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :FruttiDiMare "FrutosDoMar"@pt)
SubClassOf(:FruttiDiMare :NamedPizza)
SubClassOf(:FruttiDiMare ObjectSomeValuesFrom(:hasTopping :GarlicTopping))
SubClassOf(:FruttiDiMare ObjectSomeValuesFrom(:hasTopping :MixedSeafoodTopping))
SubClassOf(:FruttiDiMare ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:FruttiDiMare ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GarlicTopping :MixedSeafoodTopping :TomatoTopping)))
DisjointClasses(:FruttiDiMare :Giardiniera)
DisjointClasses(:FruttiDiMare :LaReine)
DisjointClasses(:FruttiDiMare :Margherita)
DisjointClasses(:FruttiDiMare :Mushroom)
DisjointClasses(:FruttiDiMare :Napoletana)
DisjointClasses(:FruttiDiMare :Parmense)
DisjointClasses(:FruttiDiMare :PolloAdAstra)
DisjointClasses(:FruttiDiMare :PrinceCarlo)
DisjointClasses(:FruttiDiMare :QuattroFormaggi)
DisjointClasses(:FruttiDiMare :Rosa)
DisjointClasses(:FruttiDiMare :Siciliana)
DisjointClasses(:FruttiDiMare :SloppyGiuseppe)
DisjointClasses(:FruttiDiMare :Soho)
DisjointClasses(:FruttiDiMare :UnclosedPizza)
DisjointClasses(:FruttiDiMare :Veneziana)
AnnotationAssertion(rdfs:label :GarlicTopping "CoberturaDeAlho"@pt)
SubClassOf(:GarlicTopping :VegetableTopping)
SubClassOf(:GarlicTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
DisjointClasses(:GarlicTopping :LeekTopping)
DisjointClasses(:GarlicTopping :MushroomTopping)
DisjointClasses(:GarlicTopping :OliveTopping)
DisjointClasses(:GarlicTopping :OnionTopping)
DisjointClasses(:GarlicTopping :PepperTopping)
DisjointClasses(:GarlicTopping :PetitPoisTopping)
DisjointClasses(:GarlicTopping :RocketTopping)
DisjointClasses(:GarlicTopping :SpinachTopping)
DisjointClasses(:GarlicTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :Giardiniera "Giardiniera"@pt)
SubClassOf(:Giardiniera :NamedPizza)
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :LeekTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :PeperonataTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :PetitPoisTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :SlicedTomatoTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Giardiniera ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:LeekTopping :MozzarellaTopping :MushroomTopping :OliveTopping :PeperonataTopping :PetitPoisTopping :SlicedTomatoTopping :TomatoTopping)))
DisjointClasses(:Giardiniera :LaReine)
DisjointClasses(:Giardiniera :Margherita)
DisjointClasses(:Giardiniera :Mushroom)
DisjointClasses(:Giardiniera :Napoletana)
DisjointClasses(:Giardiniera :Parmense)
DisjointClasses(:Giardiniera :PolloAdAstra)
DisjointClasses(:Giardiniera :PrinceCarlo)
DisjointClasses(:Giardiniera :QuattroFormaggi)
DisjointClasses(:Giardiniera :Rosa)
DisjointClasses(:Giardiniera :Siciliana)
DisjointClasses(:Giardiniera :SloppyGiuseppe)
DisjointClasses(:Giardiniera :Soho)
DisjointClasses(:Giardiniera :UnclosedPizza)
DisjointClasses(:Giardiniera :Veneziana)
AnnotationAssertion(rdfs:label :GoatsCheeseTopping "CoberturaDeQueijoDeCabra"@pt)
SubClassOf(:GoatsCheeseTopping :CheeseTopping)
SubClassOf(:GoatsCheeseTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:GoatsCheeseTopping :GorgonzolaTopping)
DisjointClasses(:GoatsCheeseTopping :MozzarellaTopping)
DisjointClasses(:GoatsCheeseTopping :ParmesanTopping)
AnnotationAssertion(rdfs:label :GorgonzolaTopping "CoberturaDeGorgonzola"@pt)
SubClassOf(:GorgonzolaTopping :CheeseTopping)
SubClassOf(:GorgonzolaTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:GorgonzolaTopping :MozzarellaTopping)
DisjointClasses(:GorgonzolaTopping :ParmesanTopping)
AnnotationAssertion(rdfs:label :GreenPepperTopping "CoberturaDePimentaoVerde"@pt)
SubClassOf(:GreenPepperTopping :PepperTopping)
DisjointClasses(:GreenPepperTopping :JalapenoPepperTopping)
DisjointClasses(:GreenPepperTopping :PeperonataTopping)
DisjointClasses(:GreenPepperTopping :SweetPepperTopping)
AnnotationAssertion(rdfs:label :HamTopping "CoberturaDePresunto"@pt)
SubClassOf(:HamTopping :MeatTopping)
DisjointClasses(:HamTopping :HotSpicedBeefTopping)
DisjointClasses(:HamTopping :PeperoniSausageTopping)
AnnotationAssertion(rdfs:label :HerbSpiceTopping "CoberturaDeErvas"@pt)
SubClassOf(:HerbSpiceTopping :PizzaTopping)
DisjointClasses(:HerbSpiceTopping :MeatTopping)
DisjointClasses(:HerbSpiceTopping :NutTopping)
DisjointClasses(:HerbSpiceTopping :SauceTopping)
DisjointClasses(:HerbSpiceTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :Hot "Picante"@pt)
SubClassOf(:Hot :Spiciness)
DisjointClasses(:Hot :Medium)
DisjointClasses(:Hot :Mild)
AnnotationAssertion(rdfs:label :HotGreenPepperTopping "CoberturaDePimentaoVerdePicante"@pt)
SubClassOf(:HotGreenPepperTopping :GreenPepperTopping)
SubClassOf(:HotGreenPepperTopping ObjectSomeValuesFrom(:hasSpiciness :Hot))
AnnotationAssertion(rdfs:label :HotSpicedBeefTopping "CoberturaDeBifePicante"@pt)
SubClassOf(:HotSpicedBeefTopping :MeatTopping)
SubClassOf(:HotSpicedBeefTopping ObjectSomeValuesFrom(:hasSpiciness :Hot))
DisjointClasses(:HotSpicedBeefTopping :PeperoniSausageTopping)
AnnotationAssertion(rdfs:label :IceCream "Sorvete"@pt)
AnnotationAssertion(rdfs:comment :IceCream "A class to demonstrate mistakes made with setting a property domain. The property hasTopping has a domain of Pizza. This means that the reasoner can infer that all individuals using the hasTopping property must be of type Pizza. Because of the restriction on this class, all members of IceCream must use the hasTopping property, and therefore must also be members of Pizza. However, Pizza and IceCream are disjoint, so this causes an inconsistency. If they were not disjoint, IceCream would be inferred to be a subclass of Pizza."@en)
SubClassOf(:IceCream :Food)
SubClassOf(:IceCream ObjectSomeValuesFrom(:hasTopping :FruitTopping))
DisjointClasses(:IceCream :Pizza)
DisjointClasses(:IceCream :PizzaBase)
DisjointClasses(:IceCream :PizzaTopping)
AnnotationAssertion(rdfs:label :InterestingPizza "PizzaInteressante"@pt)
AnnotationAssertion(rdfs:comment :InterestingPizza "Any pizza that has at least 3 toppings. Note that this is a cardinality constraint on the hasTopping property and NOT a qualified cardinality constraint (QCR). A QCR would specify from which class the members in this relationship must be. eg has at least 3 toppings from PizzaTopping. This is currently not supported in OWL."@en)
EquivalentClasses(:InterestingPizza ObjectIntersectionOf(ObjectMinCardinality(3 :hasTopping) :Pizza))
AnnotationAssertion(rdfs:label :JalapenoPepperTopping "CoberturaDeJalapeno"@pt)
SubClassOf(:JalapenoPepperTopping :PepperTopping)
SubClassOf(:JalapenoPepperTopping ObjectSomeValuesFrom(:hasSpiciness :Hot))
DisjointClasses(:JalapenoPepperTopping :PeperonataTopping)
DisjointClasses(:JalapenoPepperTopping :SweetPepperTopping)
AnnotationAssertion(rdfs:label :LaReine "LaReine"@pt)
SubClassOf(:LaReine :NamedPizza)
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :HamTopping))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:LaReine ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:HamTopping :MozzarellaTopping :MushroomTopping :OliveTopping :TomatoTopping)))
DisjointClasses(:LaReine :Margherita)
DisjointClasses(:LaReine :Mushroom)
DisjointClasses(:LaReine :Napoletana)
DisjointClasses(:LaReine :Parmense)
DisjointClasses(:LaReine :PolloAdAstra)
DisjointClasses(:LaReine :PrinceCarlo)
DisjointClasses(:LaReine :QuattroFormaggi)
DisjointClasses(:LaReine :Rosa)
DisjointClasses(:LaReine :Siciliana)
DisjointClasses(:LaReine :SloppyGiuseppe)
DisjointClasses(:LaReine :Soho)
DisjointClasses(:LaReine :UnclosedPizza)
DisjointClasses(:LaReine :Veneziana)
AnnotationAssertion(rdfs:label :LeekTopping "CoberturaDeLeek"@pt)
SubClassOf(:LeekTopping :VegetableTopping)
SubClassOf(:LeekTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:LeekTopping :MushroomTopping)
DisjointClasses(:LeekTopping :OliveTopping)
DisjointClasses(:LeekTopping :OnionTopping)
DisjointClasses(:LeekTopping :PepperTopping)
DisjointClasses(:LeekTopping :PetitPoisTopping)
DisjointClasses(:LeekTopping :RocketTopping)
DisjointClasses(:LeekTopping :SpinachTopping)
DisjointClasses(:LeekTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :Margherita "Margherita"@pt)
SubClassOf(:Margherita :NamedPizza)
SubClassOf(:Margherita ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Margherita ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Margherita ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:TomatoTopping :MozzarellaTopping)))
DisjointClasses(:Margherita :Mushroom)
DisjointClasses(:Margherita :Napoletana)
DisjointClasses(:Margherita :Parmense)
DisjointClasses(:Margherita :PolloAdAstra)
DisjointClasses(:Margherita :PrinceCarlo)
DisjointClasses(:Margherita :QuattroFormaggi)
DisjointClasses(:Margherita :Rosa)
DisjointClasses(:Margherita :Siciliana)
DisjointClasses(:Margherita :SloppyGiuseppe)
DisjointClasses(:Margherita :Soho)
DisjointClasses(:Margherita :UnclosedPizza)
DisjointClasses(:Margherita :Veneziana)
AnnotationAssertion(rdfs:label :MeatTopping "CoberturaDeCarne"@pt)
SubClassOf(:MeatTopping :PizzaTopping)
DisjointClasses(:MeatTopping :NutTopping)
DisjointClasses(:MeatTopping :SauceTopping)
DisjointClasses(:MeatTopping :VegetableTopping)
AnnotationAssertion(rdfs:comment :MeatyPizza "Any pizza that has at least one meat topping"@en)
AnnotationAssertion(rdfs:label :MeatyPizza "PizzaDeCarne"@pt)
EquivalentClasses(:MeatyPizza ObjectIntersectionOf(ObjectSomeValuesFrom(:hasTopping :MeatTopping) :Pizza))
AnnotationAssertion(rdfs:label :Medium "Media"@pt)
SubClassOf(:Medium :Spiciness)
DisjointClasses(:Medium :Mild)
AnnotationAssertion(rdfs:label :Mild "NaoPicante"@pt)
SubClassOf(:Mild :Spiciness)
AnnotationAssertion(rdfs:label :MixedSeafoodTopping "CoberturaDeFrutosDoMarMistos"@pt)
SubClassOf(:MixedSeafoodTopping :FishTopping)
DisjointClasses(:MixedSeafoodTopping :PrawnsTopping)
AnnotationAssertion(rdfs:label :MozzarellaTopping "CoberturaDeMozzarella"@pt)
SubClassOf(:MozzarellaTopping :CheeseTopping)
SubClassOf(:MozzarellaTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
SubClassOf(:MozzarellaTopping ObjectHasValue(:hasCountryOfOrigin :Italy))
DisjointClasses(:MozzarellaTopping :ParmesanTopping)
AnnotationAssertion(rdfs:label :Mushroom "Cogumelo"@pt)
SubClassOf(:Mushroom :NamedPizza)
SubClassOf(:Mushroom ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Mushroom ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:Mushroom ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Mushroom ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :MushroomTopping :TomatoTopping)))
DisjointClasses(:Mushroom :Napoletana)
DisjointClasses(:Mushroom :Parmense)
DisjointClasses(:Mushroom :PolloAdAstra)
DisjointClasses(:Mushroom :PrinceCarlo)
DisjointClasses(:Mushroom :QuattroFormaggi)
DisjointClasses(:Mushroom :Rosa)
DisjointClasses(:Mushroom :Siciliana)
DisjointClasses(:Mushroom :SloppyGiuseppe)
DisjointClasses(:Mushroom :Soho)
DisjointClasses(:Mushroom :UnclosedPizza)
DisjointClasses(:Mushroom :Veneziana)
AnnotationAssertion(rdfs:label :MushroomTopping "CoberturaDeCogumelo"@pt)
SubClassOf(:MushroomTopping :VegetableTopping)
SubClassOf(:MushroomTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:MushroomTopping :OliveTopping)
DisjointClasses(:MushroomTopping :OnionTopping)
DisjointClasses(:MushroomTopping :PepperTopping)
DisjointClasses(:MushroomTopping :PetitPoisTopping)
DisjointClasses(:MushroomTopping :RocketTopping)
DisjointClasses(:MushroomTopping :SpinachTopping)
DisjointClasses(:MushroomTopping :TomatoTopping)
AnnotationAssertion(rdfs:comment :NamedPizza "A pizza that can be found on a pizza menu"@en)
AnnotationAssertion(rdfs:label :NamedPizza "PizzaComUmNome"@pt)
SubClassOf(:NamedPizza :Pizza)
AnnotationAssertion(rdfs:label :Napoletana "Napoletana"@pt)
SubClassOf(:Napoletana :NamedPizza)
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :AnchoviesTopping))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :CaperTopping))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Napoletana ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AnchoviesTopping :CaperTopping :MozzarellaTopping :OliveTopping :TomatoTopping)))
SubClassOf(:Napoletana ObjectHasValue(:hasCountryOfOrigin :Italy))
DisjointClasses(:Napoletana :Parmense)
DisjointClasses(:Napoletana :PolloAdAstra)
DisjointClasses(:Napoletana :PrinceCarlo)
DisjointClasses(:Napoletana :QuattroFormaggi)
DisjointClasses(:Napoletana :Rosa)
DisjointClasses(:Napoletana :Siciliana)
DisjointClasses(:Napoletana :SloppyGiuseppe)
DisjointClasses(:Napoletana :Soho)
DisjointClasses(:Napoletana :UnclosedPizza)
DisjointClasses(:Napoletana :Veneziana)
AnnotationAssertion(rdfs:comment :NonVegetarianPizza "Any Pizza that is not a VegetarianPizza"@en)
AnnotationAssertion(rdfs:label :NonVegetarianPizza "PizzaNaoVegetariana"@pt)
EquivalentClasses(:NonVegetarianPizza ObjectIntersectionOf(ObjectComplementOf(:VegetarianPizza) :Pizza))
DisjointClasses(:NonVegetarianPizza :VegetarianPizza)
AnnotationAssertion(rdfs:label :NutTopping "CoberturaDeCastanha"@pt)
SubClassOf(:NutTopping :PizzaTopping)
SubClassOf(:NutTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:NutTopping :SauceTopping)
DisjointClasses(:NutTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :OliveTopping "CoberturaDeAzeitona"@pt)
SubClassOf(:OliveTopping :VegetableTopping)
SubClassOf(:OliveTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:OliveTopping :OnionTopping)
DisjointClasses(:OliveTopping :PepperTopping)
DisjointClasses(:OliveTopping :PetitPoisTopping)
DisjointClasses(:OliveTopping :RocketTopping)
DisjointClasses(:OliveTopping :SpinachTopping)
DisjointClasses(:OliveTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :OnionTopping "CoberturaDeCebola"@pt)
SubClassOf(:OnionTopping :VegetableTopping)
SubClassOf(:OnionTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
DisjointClasses(:OnionTopping :PepperTopping)
DisjointClasses(:OnionTopping :PetitPoisTopping)
DisjointClasses(:OnionTopping :RocketTopping)
DisjointClasses(:OnionTopping :SpinachTopping)
DisjointClasses(:OnionTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :ParmaHamTopping "CoberturaDePrezuntoParma"@pt)
SubClassOf(:ParmaHamTopping :HamTopping)
SubClassOf(:ParmaHamTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :Parmense "Parmense"@pt)
SubClassOf(:Parmense :NamedPizza)
SubClassOf(:Parmense ObjectSomeValuesFrom(:hasTopping :AsparagusTopping))
SubClassOf(:Parmense ObjectSomeValuesFrom(:hasTopping :HamTopping))
SubClassOf(:Parmense ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Parmense ObjectSomeValuesFrom(:hasTopping :ParmesanTopping))
SubClassOf(:Parmense ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Parmense ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AsparagusTopping :HamTopping :MozzarellaTopping :ParmesanTopping :TomatoTopping)))
DisjointClasses(:Parmense :PolloAdAstra)
DisjointClasses(:Parmense :PrinceCarlo)
DisjointClasses(:Parmense :QuattroFormaggi)
DisjointClasses(:Parmense :Rosa)
DisjointClasses(:Parmense :Siciliana)
DisjointClasses(:Parmense :SloppyGiuseppe)
DisjointClasses(:Parmense :Soho)
DisjointClasses(:Parmense :UnclosedPizza)
DisjointClasses(:Parmense :Veneziana)
AnnotationAssertion(rdfs:label :ParmesanTopping "CoberturaDeParmesao"@pt)
SubClassOf(:ParmesanTopping :CheeseTopping)
SubClassOf(:ParmesanTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :PeperonataTopping "CoberturaPeperonata"@pt)
SubClassOf(:PeperonataTopping :PepperTopping)
SubClassOf(:PeperonataTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
DisjointClasses(:PeperonataTopping :SweetPepperTopping)
AnnotationAssertion(rdfs:label :PeperoniSausageTopping "CoberturaDeCalabreza"@pt)
SubClassOf(:PeperoniSausageTopping :MeatTopping)
SubClassOf(:PeperoniSausageTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
AnnotationAssertion(rdfs:label :PepperTopping "CoberturaDePimentao"@pt)
SubClassOf(:PepperTopping :VegetableTopping)
DisjointClasses(:PepperTopping :PetitPoisTopping)
DisjointClasses(:PepperTopping :RocketTopping)
DisjointClasses(:PepperTopping :SpinachTopping)
DisjointClasses(:PepperTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :PetitPoisTopping "CoberturaPetitPois"@pt)
SubClassOf(:PetitPoisTopping :VegetableTopping)
SubClassOf(:PetitPoisTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:PetitPoisTopping :RocketTopping)
DisjointClasses(:PetitPoisTopping :SpinachTopping)
DisjointClasses(:PetitPoisTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :PineKernels "CoberturaPineKernels"@pt)
SubClassOf(:PineKernels :NutTopping)
AnnotationAssertion(rdfs:label :Pizza "Pizza"@en)
SubClassOf(:Pizza :Food)
SubClassOf(:Pizza ObjectSomeValuesFrom(:hasBase :PizzaBase))
DisjointClasses(:Pizza :PizzaBase)
DisjointClasses(:Pizza :PizzaTopping)
AnnotationAssertion(rdfs:label :PizzaBase "BaseDaPizza"@pt)
SubClassOf(:PizzaBase :Food)
DisjointClasses(:PizzaBase :PizzaTopping)
AnnotationAssertion(rdfs:label :PizzaTopping "CoberturaDaPizza"@pt)
SubClassOf(:PizzaTopping :Food)
AnnotationAssertion(rdfs:label :PolloAdAstra "PolloAdAstra"@pt)
SubClassOf(:PolloAdAstra :NamedPizza)
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :CajunSpiceTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :ChickenTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :GarlicTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :RedOnionTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :SweetPepperTopping))
SubClassOf(:PolloAdAstra ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:PolloAdAstra ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:CajunSpiceTopping :ChickenTopping :GarlicTopping :MozzarellaTopping :RedOnionTopping :SweetPepperTopping :TomatoTopping)))
DisjointClasses(:PolloAdAstra :PrinceCarlo)
DisjointClasses(:PolloAdAstra :QuattroFormaggi)
DisjointClasses(:PolloAdAstra :Rosa)
DisjointClasses(:PolloAdAstra :Siciliana)
DisjointClasses(:PolloAdAstra :SloppyGiuseppe)
DisjointClasses(:PolloAdAstra :Soho)
DisjointClasses(:PolloAdAstra :UnclosedPizza)
DisjointClasses(:PolloAdAstra :Veneziana)
AnnotationAssertion(rdfs:label :PrawnsTopping "CoberturaDeCamarao"@pt)
SubClassOf(:PrawnsTopping :FishTopping)
AnnotationAssertion(rdfs:label :PrinceCarlo "CoberturaPrinceCarlo"@pt)
SubClassOf(:PrinceCarlo :NamedPizza)
SubClassOf(:PrinceCarlo ObjectSomeValuesFrom(:hasTopping :LeekTopping))
SubClassOf(:PrinceCarlo ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:PrinceCarlo ObjectSomeValuesFrom(:hasTopping :ParmesanTopping))
SubClassOf(:PrinceCarlo ObjectSomeValuesFrom(:hasTopping :RosemaryTopping))
SubClassOf(:PrinceCarlo ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:PrinceCarlo ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:LeekTopping :MozzarellaTopping :ParmesanTopping :RosemaryTopping :TomatoTopping)))
DisjointClasses(:PrinceCarlo :QuattroFormaggi)
DisjointClasses(:PrinceCarlo :Rosa)
DisjointClasses(:PrinceCarlo :Siciliana)
DisjointClasses(:PrinceCarlo :SloppyGiuseppe)
DisjointClasses(:PrinceCarlo :Soho)
DisjointClasses(:PrinceCarlo :UnclosedPizza)
DisjointClasses(:PrinceCarlo :Veneziana)
AnnotationAssertion(rdfs:label :QuattroFormaggi "QuatroQueijos"@pt)
SubClassOf(:QuattroFormaggi :NamedPizza)
SubClassOf(:QuattroFormaggi ObjectSomeValuesFrom(:hasTopping :FourCheesesTopping))
SubClassOf(:QuattroFormaggi ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:QuattroFormaggi ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:TomatoTopping :FourCheesesTopping)))
DisjointClasses(:QuattroFormaggi :Rosa)
DisjointClasses(:QuattroFormaggi :Siciliana)
DisjointClasses(:QuattroFormaggi :SloppyGiuseppe)
DisjointClasses(:QuattroFormaggi :Soho)
DisjointClasses(:QuattroFormaggi :UnclosedPizza)
DisjointClasses(:QuattroFormaggi :Veneziana)
AnnotationAssertion(rdfs:comment :RealItalianPizza "This defined class has conditions that are part of the definition: ie any Pizza that has the country of origin, Italy is a RealItalianPizza. It also has conditions that merely describe the members - that all RealItalianPizzas must only have ThinAndCrispy bases. In essence, all pizzas from Italy must have ThinAndCrispy bases."@en)
AnnotationAssertion(rdfs:label :RealItalianPizza "PizzaItalianaReal"@pt)
EquivalentClasses(:RealItalianPizza ObjectIntersectionOf(ObjectHasValue(:hasCountryOfOrigin :Italy) :Pizza))
SubClassOf(:RealItalianPizza ObjectAllValuesFrom(:hasBase :ThinAndCrispyBase))
AnnotationAssertion(rdfs:label :RedOnionTopping "CoberturaDeCebolaVermelha"@pt)
SubClassOf(:RedOnionTopping :OnionTopping)
AnnotationAssertion(rdfs:label :RocketTopping "CoberturaRocket"@pt)
SubClassOf(:RocketTopping :VegetableTopping)
SubClassOf(:RocketTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
DisjointClasses(:RocketTopping :SpinachTopping)
DisjointClasses(:RocketTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :Rosa "Rosa"@pt)
SubClassOf(:Rosa :NamedPizza)
SubClassOf(:Rosa ObjectSomeValuesFrom(:hasTopping :GorgonzolaTopping))
SubClassOf(:Rosa ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Rosa ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Rosa ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GorgonzolaTopping :MozzarellaTopping :TomatoTopping)))
DisjointClasses(:Rosa :Siciliana)
DisjointClasses(:Rosa :SloppyGiuseppe)
DisjointClasses(:Rosa :Soho)
DisjointClasses(:Rosa :UnclosedPizza)
DisjointClasses(:Rosa :Veneziana)
AnnotationAssertion(rdfs:label :RosemaryTopping "CoberturaRosemary"@pt)
SubClassOf(:RosemaryTopping :HerbSpiceTopping)
SubClassOf(:RosemaryTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :SauceTopping "CoberturaEmMolho"@pt)
SubClassOf(:SauceTopping :PizzaTopping)
DisjointClasses(:SauceTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :Siciliana "Siciliana"@pt)
SubClassOf(:Siciliana :NamedPizza)
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :AnchoviesTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :ArtichokeTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :GarlicTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :HamTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Siciliana ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Siciliana ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AnchoviesTopping :ArtichokeTopping :GarlicTopping :HamTopping :MozzarellaTopping :OliveTopping :TomatoTopping)))
DisjointClasses(:Siciliana :SloppyGiuseppe)
DisjointClasses(:Siciliana :Soho)
DisjointClasses(:Siciliana :UnclosedPizza)
DisjointClasses(:Siciliana :Veneziana)
AnnotationAssertion(rdfs:label :SlicedTomatoTopping "CoberturaDeTomateFatiado"@pt)
SubClassOf(:SlicedTomatoTopping :TomatoTopping)
SubClassOf(:SlicedTomatoTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:SlicedTomatoTopping :SundriedTomatoTopping)
AnnotationAssertion(rdfs:label :SloppyGiuseppe "SloppyGiuseppe"@pt)
SubClassOf(:SloppyGiuseppe :NamedPizza)
SubClassOf(:SloppyGiuseppe ObjectSomeValuesFrom(:hasTopping :GreenPepperTopping))
SubClassOf(:SloppyGiuseppe ObjectSomeValuesFrom(:hasTopping :HotSpicedBeefTopping))
SubClassOf(:SloppyGiuseppe ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:SloppyGiuseppe ObjectSomeValuesFrom(:hasTopping :OnionTopping))
SubClassOf(:SloppyGiuseppe ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:SloppyGiuseppe ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GreenPepperTopping :HotSpicedBeefTopping :MozzarellaTopping :OnionTopping :TomatoTopping)))
DisjointClasses(:SloppyGiuseppe :Soho)
DisjointClasses(:SloppyGiuseppe :UnclosedPizza)
DisjointClasses(:SloppyGiuseppe :Veneziana)
AnnotationAssertion(rdfs:label :Soho "Soho"@pt)
SubClassOf(:Soho :NamedPizza)
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :GarlicTopping))
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :ParmesanTopping))
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :RocketTopping))
SubClassOf(:Soho ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Soho ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:GarlicTopping :MozzarellaTopping :OliveTopping :ParmesanTopping :RocketTopping :TomatoTopping)))
DisjointClasses(:Soho :UnclosedPizza)
DisjointClasses(:Soho :Veneziana)
AnnotationAssertion(rdfs:label :Spiciness "Tempero"@pt)
AnnotationAssertion(rdfs:comment :Spiciness "A ValuePartition that describes only values from Hot, Medium or Mild. NB Subclasses can themselves be divided up into further partitions."@en)
EquivalentClasses(:Spiciness ObjectUnionOf(:Hot :Medium :Mild))
SubClassOf(:Spiciness :ValuePartition)
AnnotationAssertion(rdfs:label :SpicyPizza "PizzaTemperada"@pt)
AnnotationAssertion(rdfs:comment :SpicyPizza "Any pizza that has a spicy topping is a SpicyPizza"@en)
EquivalentClasses(:SpicyPizza ObjectIntersectionOf(ObjectSomeValuesFrom(:hasTopping :SpicyTopping) :Pizza))
AnnotationAssertion(rdfs:comment :SpicyPizzaEquivalent "An alternative definition for the SpicyPizza which does away with needing a definition of SpicyTopping and uses a slightly more complicated restriction: Pizzas that have at least one topping that is both a PizzaTopping and has spiciness hot are members of this class."@en)
AnnotationAssertion(rdfs:label :SpicyPizzaEquivalent "PizzaTemperadaEquivalente"@pt)
EquivalentClasses(:SpicyPizzaEquivalent ObjectIntersectionOf(ObjectSomeValuesFrom(:hasTopping ObjectIntersectionOf(ObjectSomeValuesFrom(:hasSpiciness :Hot) :PizzaTopping)) :Pizza))
AnnotationAssertion(rdfs:comment :SpicyTopping "Any pizza topping that has spiciness Hot"@en)
AnnotationAssertion(rdfs:label :SpicyTopping "CoberturaTemperada"@pt)
EquivalentClasses(:SpicyTopping ObjectIntersectionOf(ObjectSomeValuesFrom(:hasSpiciness :Hot) :PizzaTopping))
AnnotationAssertion(rdfs:label :SpinachTopping "CoberturaDeEspinafre"@pt)
SubClassOf(:SpinachTopping :VegetableTopping)
SubClassOf(:SpinachTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
DisjointClasses(:SpinachTopping :TomatoTopping)
AnnotationAssertion(rdfs:label :SultanaTopping "CoberturaSultana"@pt)
SubClassOf(:SultanaTopping :FruitTopping)
SubClassOf(:SultanaTopping ObjectSomeValuesFrom(:hasSpiciness :Medium))
AnnotationAssertion(rdfs:label :SundriedTomatoTopping "CoberturaDeTomateRessecadoAoSol"@pt)
SubClassOf(:SundriedTomatoTopping :TomatoTopping)
SubClassOf(:SundriedTomatoTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :SweetPepperTopping "CoberturaDePimentaoDoce"@pt)
SubClassOf(:SweetPepperTopping :PepperTopping)
SubClassOf(:SweetPepperTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :ThinAndCrispyBase "BaseFinaEQuebradica"@pt)
SubClassOf(:ThinAndCrispyBase :PizzaBase)
EquivalentClasses(:ThinAndCrispyPizza ObjectIntersectionOf(ObjectAllValuesFrom(:hasBase :ThinAndCrispyBase) :Pizza))
AnnotationAssertion(rdfs:label :TobascoPepperSauce "MolhoTobascoPepper"@pt)
SubClassOf(:TobascoPepperSauce :SauceTopping)
SubClassOf(:TobascoPepperSauce ObjectSomeValuesFrom(:hasSpiciness :Hot))
AnnotationAssertion(rdfs:label :TomatoTopping "CoberturaDeTomate"@pt)
SubClassOf(:TomatoTopping :VegetableTopping)
SubClassOf(:TomatoTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:comment :UnclosedPizza "An unclosed Pizza cannot be inferred to be either a VegetarianPizza or a NonVegetarianPizza, because it might have other toppings."^^xsd:string)
AnnotationAssertion(rdfs:label :UnclosedPizza "PizzaAberta"@pt)
SubClassOf(:UnclosedPizza :NamedPizza)
SubClassOf(:UnclosedPizza ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
DisjointClasses(:UnclosedPizza :Veneziana)
AnnotationAssertion(rdfs:label :ValuePartition "ValorDaParticao"@pt)
AnnotationAssertion(rdfs:comment :ValuePartition "A ValuePartition is a pattern that describes a restricted set of classes from which a property can be associated. The parent class is used in restrictions, and the covering axiom means that only members of the subclasses may be used as values. The possible subclasses cannot be extended without updating the ValuePartition class."^^xsd:string)
AnnotationAssertion(rdfs:label :VegetableTopping "CoberturaDeVegetais"@pt)
SubClassOf(:VegetableTopping :PizzaTopping)
AnnotationAssertion(rdfs:comment :VegetarianPizza "Any pizza that does not have fish topping and does not have meat topping is a VegetarianPizza. Members of this class do not need to have any toppings at all."@en)
AnnotationAssertion(rdfs:label :VegetarianPizza "PizzaVegetariana"@pt)
EquivalentClasses(:VegetarianPizza ObjectIntersectionOf(:Pizza ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :FishTopping)) ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :MeatTopping))))
AnnotationAssertion(rdfs:label :VegetarianPizzaEquivalent1 "PizzaVegetarianaEquivalente1"@pt)
AnnotationAssertion(rdfs:comment :VegetarianPizzaEquivalent1 "Any pizza that only has vegetarian toppings or no toppings is a VegetarianPizzaEquiv1. Should be inferred to be equivalent to VegetarianPizzaEquiv2.  Not equivalent to VegetarianPizza because PizzaTopping is not covering"@en)
EquivalentClasses(:VegetarianPizzaEquivalent1 ObjectIntersectionOf(ObjectAllValuesFrom(:hasTopping :VegetarianTopping) :Pizza))
AnnotationAssertion(rdfs:label :VegetarianPizzaEquivalent2 "PizzaVegetarianaEquivalente2"@pt)
AnnotationAssertion(rdfs:comment :VegetarianPizzaEquivalent2 "An alternative to VegetarianPizzaEquiv1 that does not require a definition of VegetarianTopping. Perhaps more difficult to maintain. Not equivalent to VegetarianPizza"@en)
EquivalentClasses(:VegetarianPizzaEquivalent2 ObjectIntersectionOf(ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :NutTopping :SauceTopping :VegetableTopping)) :Pizza))
AnnotationAssertion(rdfs:comment :VegetarianTopping "An example of a covering axiom. VegetarianTopping is equivalent to the union of all toppings in the given axiom. VegetarianToppings can only be Cheese or Vegetable or....etc."@en)
AnnotationAssertion(rdfs:label :VegetarianTopping "CoberturaVegetariana"@pt)
EquivalentClasses(:VegetarianTopping ObjectIntersectionOf(ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :NutTopping :SauceTopping :VegetableTopping) :PizzaTopping))
AnnotationAssertion(rdfs:label :Veneziana "Veneziana"@pt)
SubClassOf(:Veneziana :NamedPizza)
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :CaperTopping))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :OliveTopping))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :OnionTopping))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :PineKernels))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :SultanaTopping))
SubClassOf(:Veneziana ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Veneziana ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:CaperTopping :MozzarellaTopping :OliveTopping :OnionTopping :PineKernels :SultanaTopping :TomatoTopping)))
SubClassOf(:Veneziana ObjectHasValue(:hasCountryOfOrigin :Italy))
SubObjectPropertyOf(:hasBase :hasIngredient)
InverseObjectProperties(:hasBase :isBaseOf)
FunctionalObjectProperty(:hasBase)
InverseFunctionalObjectProperty(:hasBase)
ObjectPropertyDomain(:hasBase :Pizza)
ObjectPropertyRange(:hasBase :PizzaBase)
AnnotationAssertion(rdfs:comment :hasIngredient "NB Transitive - the ingredients of ingredients are ingredients of the whole"@en)
InverseObjectProperties(:hasIngredient :isIngredientOf)
TransitiveObjectProperty(:hasIngredient)
ObjectPropertyDomain(:hasIngredient :Food)
ObjectPropertyRange(:hasIngredient :Food)
AnnotationAssertion(rdfs:comment :hasSpiciness "A property created to be used with the ValuePartition - Spiciness."@en)
FunctionalObjectProperty(:hasSpiciness)
ObjectPropertyRange(:hasSpiciness :Spiciness)
AnnotationAssertion(rdfs:comment :hasTopping "Note that hasTopping is inverse functional because isToppingOf is functional"@en)
SubObjectPropertyOf(:hasTopping :hasIngredient)
InverseObjectProperties(:hasTopping :isToppingOf)
InverseFunctionalObjectProperty(:hasTopping)
ObjectPropertyDomain(:hasTopping :Pizza)
ObjectPropertyRange(:hasTopping :PizzaTopping)
SubObjectPropertyOf(:isBaseOf :isIngredientOf)
FunctionalObjectProperty(:isBaseOf)
InverseFunctionalObjectProperty(:isBaseOf)
ObjectPropertyDomain(:isBaseOf :PizzaBase)
ObjectPropertyRange(:isBaseOf :Pizza)
AnnotationAssertion(rdfs:comment :isIngredientOf "The inverse property tree to hasIngredient - all subproperties and attributes of the properties should reflect those under hasIngredient."@en)
TransitiveObjectProperty(:isIngredientOf)
ObjectPropertyDomain(:isIngredientOf :Food)
ObjectPropertyRange(:isIngredientOf :Food)
AnnotationAssertion(rdfs:comment :isToppingOf "Any given instance of topping should only be added to a single pizza (no cheap half-measures on our pizzas)"@en)
SubObjectPropertyOf(:isToppingOf :isIngredientOf)
FunctionalObjectProperty(:isToppingOf)
ObjectPropertyDomain(:isToppingOf :PizzaTopping)
ObjectPropertyRange(:isToppingOf :Pizza)
ClassAssertion(:Country :America)
ClassAssertion(owl:Thing :America)
ClassAssertion(:Country :England)
ClassAssertion(owl:Thing :England)
ClassAssertion(:Country :France)
ClassAssertion(owl:Thing :France)
ClassAssertion(:Country :Germany)
ClassAssertion(owl:Thing :Germany)
ClassAssertion(:Country :Italy)
ClassAssertion(owl:Thing :Italy)
DifferentIndividuals(:America :England :France :Germany :Italy)
)